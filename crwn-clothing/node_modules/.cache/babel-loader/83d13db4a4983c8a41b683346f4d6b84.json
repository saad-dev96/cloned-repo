{"ast":null,"code":"import firebase from 'firebase/app';\nimport 'firebase/firestore';\nimport 'firebase/auth';\nconst config = {\n  apiKey: \"AIzaSyAwagm95EIbK_mAeqge4zyti4lRfteR84o\",\n  authDomain: \"crwn-db-ae15f.firebaseapp.com\",\n  databaseURL: \"https://crwn-db-ae15f.firebaseio.com\",\n  projectId: \"crwn-db-ae15f\",\n  storageBucket: \"crwn-db-ae15f.appspot.com\",\n  messagingSenderId: \"91269761969\",\n  appId: \"1:91269761969:web:6edcd03556a5e6569f0b90\",\n  measurementId: \"G-LF2PWSYF09\"\n};\nexport const createUserProfileDocument = async (userAuth, additionalData) => {\n  if (!userAuth) return;\n  const userRef = firestore.doc(`users/${userAuth.uid}`);\n  const snapShot = await userRef.get();\n\n  if (!snapShot.exists) {\n    const {\n      displayName,\n      email\n    } = userAuth;\n    const createdAt = new Date();\n\n    try {\n      await userRef.set({\n        displayName,\n        email,\n        createdAt,\n        ...additionalData\n      });\n    } catch (error) {\n      console.log('error creating user', error.message);\n    }\n  }\n\n  return userRef;\n};\nfirebase.initializeApp(config);\nexport const auth = firebase.auth();\nexport const firestore = firebase.firestore();\nconst provider = new firebase.auth.GoogleAuthProvider();\nprovider.setCustomParameters({\n  prompt: 'select_account'\n});\nexport const signInWithGoogle = () => auth.signInWithPopup(provider);\nexport default firebase;","map":{"version":3,"sources":["/home/tintash/Desktop/React/E-shop/crwn-clothing/src/firebase/firebase.utils.js"],"names":["firebase","config","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","createUserProfileDocument","userAuth","additionalData","userRef","firestore","doc","uid","snapShot","get","exists","displayName","email","createdAt","Date","set","error","console","log","message","initializeApp","auth","provider","GoogleAuthProvider","setCustomParameters","prompt","signInWithGoogle","signInWithPopup"],"mappings":"AAAA,OAAOA,QAAP,MAAqB,cAArB;AACA,OAAO,oBAAP;AACA,OAAO,eAAP;AAEA,MAAMC,MAAM,GAAG;AACXC,EAAAA,MAAM,EAAE,yCADG;AAEXC,EAAAA,UAAU,EAAE,+BAFD;AAGXC,EAAAA,WAAW,EAAE,sCAHF;AAIXC,EAAAA,SAAS,EAAE,eAJA;AAKXC,EAAAA,aAAa,EAAE,2BALJ;AAMXC,EAAAA,iBAAiB,EAAE,aANR;AAOXC,EAAAA,KAAK,EAAE,0CAPI;AAQXC,EAAAA,aAAa,EAAE;AARJ,CAAf;AAWA,OAAO,MAAMC,yBAAyB,GAAG,OAAMC,QAAN,EAAgBC,cAAhB,KAAmC;AACxE,MAAG,CAACD,QAAJ,EAAc;AAEd,QAAME,OAAO,GAAEC,SAAS,CAACC,GAAV,CAAe,SAAQJ,QAAQ,CAACK,GAAI,EAApC,CAAf;AAEA,QAAMC,QAAQ,GAAG,MAAMJ,OAAO,CAACK,GAAR,EAAvB;;AAEA,MAAI,CAACD,QAAQ,CAACE,MAAd,EACA;AACI,UAAM;AAACC,MAAAA,WAAD;AAAcC,MAAAA;AAAd,QAAuBV,QAA7B;AACA,UAAMW,SAAS,GAAG,IAAIC,IAAJ,EAAlB;;AACA,QAAG;AACC,YAAMV,OAAO,CAACW,GAAR,CACF;AACIJ,QAAAA,WADJ;AAEIC,QAAAA,KAFJ;AAGIC,QAAAA,SAHJ;AAII,WAAGV;AAJP,OADE,CAAN;AAQC,KATL,CAUA,OAAOa,KAAP,EAAc;AACVC,MAAAA,OAAO,CAACC,GAAR,CAAY,qBAAZ,EAAmCF,KAAK,CAACG,OAAzC;AACH;AACJ;;AACD,SAAOf,OAAP;AACH,CA1BM;AA4BPb,QAAQ,CAAC6B,aAAT,CAAuB5B,MAAvB;AACA,OAAO,MAAM6B,IAAI,GAAG9B,QAAQ,CAAC8B,IAAT,EAAb;AACP,OAAO,MAAMhB,SAAS,GAAId,QAAQ,CAACc,SAAT,EAAnB;AAEP,MAAMiB,QAAQ,GAAI,IAAI/B,QAAQ,CAAC8B,IAAT,CAAcE,kBAAlB,EAAlB;AACAD,QAAQ,CAACE,mBAAT,CAA6B;AAACC,EAAAA,MAAM,EAAE;AAAT,CAA7B;AACA,OAAO,MAAMC,gBAAgB,GAAG,MAAOL,IAAI,CAACM,eAAL,CAAqBL,QAArB,CAAhC;AACP,eAAe/B,QAAf","sourcesContent":["import firebase from 'firebase/app'\nimport 'firebase/firestore'; \nimport 'firebase/auth'; \n\nconst config = {\n    apiKey: \"AIzaSyAwagm95EIbK_mAeqge4zyti4lRfteR84o\",\n    authDomain: \"crwn-db-ae15f.firebaseapp.com\",\n    databaseURL: \"https://crwn-db-ae15f.firebaseio.com\",\n    projectId: \"crwn-db-ae15f\",\n    storageBucket: \"crwn-db-ae15f.appspot.com\",\n    messagingSenderId: \"91269761969\",\n    appId: \"1:91269761969:web:6edcd03556a5e6569f0b90\",\n    measurementId: \"G-LF2PWSYF09\"\n};\n\nexport const createUserProfileDocument = async(userAuth, additionalData) => {\n    if(!userAuth) return;\n    \n    const userRef= firestore.doc(`users/${userAuth.uid}`);\n    \n    const snapShot = await userRef.get();\n    \n    if (!snapShot.exists)\n    {\n        const {displayName, email} = userAuth;\n        const createdAt = new Date();\n        try{\n            await userRef.set(\n                {\n                    displayName,\n                    email,\n                    createdAt,\n                    ...additionalData\n\n                })\n            }\n        catch (error) {\n            console.log('error creating user', error.message);\n        }\n    }\n    return userRef;\n} \n\nfirebase.initializeApp(config);\nexport const auth = firebase.auth();\nexport const firestore =  firebase.firestore();\n\nconst provider =  new firebase.auth.GoogleAuthProvider();\nprovider.setCustomParameters({prompt: 'select_account'});\nexport const signInWithGoogle = () => (auth.signInWithPopup(provider));\nexport default firebase; "]},"metadata":{},"sourceType":"module"}